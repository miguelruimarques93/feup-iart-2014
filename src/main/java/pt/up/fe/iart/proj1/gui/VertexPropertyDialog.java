package pt.up.fe.iart.proj1.gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import scala.Option;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class VertexPropertyDialog extends JDialog {
    private JPanel contentPane;
    private JButton buttonOK;
    private JButton buttonCancel;
    private JLabel lblType;
    private JComboBox cmbType;
    private JCheckBox chkHasGarage;
    private JLabel lblHasGarage;

    private Location _vertex;

    public VertexPropertyDialog(JFrame frame, Location vertex) {
        cmbType.setModel(new DefaultComboBoxModel<String>(new String[]{"Generic", "Patient", "Filiation", "Gas Station"}));

        setContentPane(contentPane);
        setModal(true);
        getRootPane().setDefaultButton(buttonOK);

        _vertex = vertex;

        if (Location.isFiliation(vertex)) {
            cmbType.setSelectedItem("Filiation");
            chkHasGarage.setVisible(true);
            lblHasGarage.setVisible(true);
            chkHasGarage.setSelected(Location.hasGarage(vertex));
        } else {
            chkHasGarage.setVisible(false);
            lblHasGarage.setVisible(false);

            if (Location.isPatientLocation(vertex))
                cmbType.setSelectedItem("Patient");
            else if (Location.isGasStation(vertex))
                cmbType.setSelectedItem("Gas Station");
            else if (Location.isGenericLocation(vertex))
                cmbType.setSelectedItem("Generic");
        }

        buttonOK.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onOK();
            }
        });

        buttonCancel.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onCancel();
            }
        });

// call onCancel() when cross is clicked
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                onCancel();
            }
        });

// call onCancel() on ESCAPE
        contentPane.registerKeyboardAction(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onCancel();
            }
        }, KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);

        cmbType.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                boolean isFiliationSelected = e.getItem().equals("Filiation");
                chkHasGarage.setVisible(isFiliationSelected);
                lblHasGarage.setVisible(isFiliationSelected);
                pack();
            }
        });

        pack();
    }

    private boolean _cancelled = false;

    private void onOK() {
        dispose();
    }

    private void onCancel() {
        _cancelled = true;
        dispose();
    }

    public boolean isCancelled() {
        return _cancelled;
    }

    public Location getVertex() {
        if (cmbType.getSelectedItem().equals("Filiation")) {
            return new Filiation(_vertex.position(), chkHasGarage.isSelected());
        } else if (cmbType.getSelectedItem().equals("Generic")) {
            return new GenericLocation(_vertex.position());
        } else if (cmbType.getSelectedItem().equals("Gas Station")) {
            return new GasStation(_vertex.position());
        } else if (cmbType.getSelectedItem().equals("Patient")) {
            if (Location.isPatientLocation(_vertex)) {
                Option<Patient> p = Location.patient(_vertex);

                if (p.isDefined())
                    return new PatientLocation(_vertex.position(), p.get());
                else
                    return new PatientLocation(_vertex.position(), PatientWithoutDestination$.MODULE$);
            } else {
                return new PatientLocation(_vertex.position(), PatientWithoutDestination$.MODULE$);
            }
        }

        return null;
    }

    private void createUIComponents() {


        // TODO: place custom component creation code here
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(2, 1, new Insets(10, 10, 10, 10), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1, true, false));
        panel1.add(panel2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        buttonOK = new JButton();
        buttonOK.setText("OK");
        panel2.add(buttonOK, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        buttonCancel = new JButton();
        buttonCancel.setText("Cancel");
        panel2.add(buttonCancel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        lblType = new JLabel();
        lblType.setText("Type: ");
        panel3.add(lblType, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        cmbType = new JComboBox();
        panel3.add(cmbType, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        lblHasGarage = new JLabel();
        lblHasGarage.setText("Has Garage: ");
        panel3.add(lblHasGarage, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        chkHasGarage = new JCheckBox();
        chkHasGarage.setText("");
        panel3.add(chkHasGarage, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        lblType.setLabelFor(cmbType);
        lblHasGarage.setLabelFor(cmbType);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }
}
